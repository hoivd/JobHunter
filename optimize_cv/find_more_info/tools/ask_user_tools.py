from langchain.tools import tool
from .base_tools import BaseToolsManager  # l·ªõp cha b·∫°n ƒë√£ c√≥
from fastapi import WebSocket
import asyncio


class AskUserToolsManager(BaseToolsManager):
    def _build_tools(self):
        @tool("ask_user")
        async def ask_user(question: str, ws = None) -> str:
            """H·ªèi tr·ª±c ti·∫øp ng∆∞·ªùi d√πng m·ªôt c√¢u h·ªèi v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi."""
            try:
                print(f"üëâ {question}")
                print(ws)
                if ws:  # h·ªèi qua WebSocket
                    await ws.send_text(str(question))
                    answer = await ws.receive_text()
                    return answer.strip()
                else:   # fallback: terminal
                    answer = input("Tr·∫£ l·ªùi: ")
                    return answer.strip()
            except Exception as e:
                return f"Error: {e}"

        return {'ask_user': ask_user}

async def main():
    manager = AskUserToolsManager()
    print("üìå Tools text:\n")
    print(manager.get_tools_text())

    # Test ch·∫°y tool
    tool = manager.get_tools()['ask_user']
    result = await tool.invoke({
        "question": "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt k·ªπ nƒÉng ch√≠nh c·ªßa b·∫°n l√† g√¨?"
    })
    print("‚úÖ Result:", result)

if __name__ == "__main__":
    asyncio.run(main())