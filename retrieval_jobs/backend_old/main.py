# backend.py
from fastapi import FastAPI, HTTPException, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import asyncio
from concurrent.futures import ThreadPoolExecutor
import subprocess
import os

# IMPORT AGENT C·ª¶A B·∫†N -------------------------------------------------
# ƒë·∫£m b·∫£o python c√≥ th·ªÉ import package 'agent' (ch·∫°y uvicorn t·ª´ th∆∞ m·ª•c g·ªëc ho·∫∑c set PYTHONPATH)
from agent.conversation.agent import ConversationalAgent
# ---------------------------------------------------------------------


app = FastAPI(title="ConversationalAgent API")


# CORS: cho ph√©p frontend (dev) g·ªçi API (thay ƒë·ªïi allow_origins trong production)
app.add_middleware(
CORSMiddleware,
allow_origins=["*"],
allow_credentials=True,
allow_methods=["*"],
allow_headers=["*"],
)


# Kh·ªüi t·∫°o agent **m·ªôt l·∫ßn** khi backend start
agent = ConversationalAgent()
# ThreadPool ƒë·ªÉ ch·∫°y c√°c t√°c v·ª• blocking (v√≠ d·ª• agent.chat) ngo√†i event loop
executor = ThreadPoolExecutor(max_workers=2)


# Model d·ªØ li·ªáu request
class Query(BaseModel):
    text: str


# Route test root (tr√°nh 404 khi m·ªü /)
@app.get("/")
def read_root():
    return {"message": "Backend ch·∫°y OK. G·ªçi POST /chat ho·∫∑c connect ws://<host>/ws"}


# REST endpoint: POST /chat
@app.post("/chat")
async def chat(query: Query):
    """Nh·∫≠n JSON {'text': '...'} v√† tr·∫£ {'response': '...'}"""
    loop = asyncio.get_running_loop()
    try:
        # Ch·∫°y agent.chat trong thread pool ƒë·ªÉ tr√°nh block event loop
        response = await loop.run_in_executor(executor, agent.chat, query.text)
        return {"response": response}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# WebSocket endpoint: /ws
@app.websocket("/ws")
async def websocket_chat(websocket: WebSocket):
    """M·ªü k·∫øt n·ªëi WebSocket. Client g·ª≠i text, server tr·∫£ text. L·∫∑p m√£i trong khi k·∫øt n·ªëi m·ªü."""
    await websocket.accept()
    loop = asyncio.get_running_loop()
    try:
        while True:
            text = await websocket.receive_text() # ch·ªù message t·ª´ client
            # x·ª≠ l√Ω blocking t∆∞∆°ng t·ª± b·∫±ng run_in_executor
            response = await loop.run_in_executor(executor, agent.chat, text)
            await websocket.send_text(response)
    except Exception:
        await websocket.close()
        
@app.on_event("startup")
async def startup_event():
    loop = asyncio.get_running_loop()
    
    index_file = "retrieval/jobs_index.faiss"
    pkl_file   = "retrieval/id2title.pkl"

    # n·∫øu 2 file ƒë√£ t·ªìn t·∫°i th√¨ b·ªè qua build
    if os.path.exists(index_file) and os.path.exists(pkl_file):
        print("‚úÖ Index v√† PKL ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn build l·∫°i.")
        return

    def run_index():
        print("üî® Ch·∫°y build_index ƒë·ªÉ t·∫°o FAISS v√† PKL...")
        subprocess.run(
            ["python", "-m", "retrieval.build_index"],
            check=True
        )

    # ch·∫°y trong thread pool ƒë·ªÉ kh√¥ng block event loop
    await loop.run_in_executor(None, run_index)