from langchain.schema import HumanMessage
import json
import re

class GenerateSlotNode:
    def __init__(self, llm):
        """
        - llm: LLM model (vd: ChatGoogleGenerativeAI)
        """
        self.llm = llm

    def __call__(self, state):
        print('\n=== GenerateSlotNode ===')
        mission = state["current_mission"]
        goal = mission.get("goal", "")
        objective = mission.get("objective", "")

        print(f"\n=== Generate slots for mission: {mission.get('name','Unnamed')} ===")
        print(f"üéØ Goal: {goal}")
        print(f"üéØ Objective: {objective}")

        # Prompt cho LLM: sinh ra danh s√°ch slot c·∫ßn thu th·∫≠p
        prompt = f"""
Mission: {mission.get("name","")}
Goal: {goal}
Objective: {objective}

H√£y t·∫°o c·∫•u tr√∫c JSON `required_slots` ƒë·ªÉ thu th·∫≠p th√¥ng tin cho mission n√†y.

Y√™u c·∫ßu:
1. N·∫øu mission y√™u c·∫ßu **nhi·ªÅu m·ª•c** (v√≠ d·ª•: 2‚Äì3 d·ª± √°n, nhi·ªÅu ch·ª©ng ch·ªâ, nhi·ªÅu gi·∫£i th∆∞·ªüng, nhi·ªÅu kh√≥a h·ªçc...), 
   th√¨ tr·∫£ v·ªÅ m·ªôt JSON list g·ªìm nhi·ªÅu object. 
   - M·ªói object ƒë·∫°i di·ªán cho m·ªôt m·ª•c. 
   - C√°c object ph·∫£i c√≥ c√πng c·∫•u tr√∫c slot (snake_case, ng·∫Øn g·ªçn).
   - Kh√¥ng ƒëi·ªÅn d·ªØ li·ªáu, ch·ªâ ƒë·ªÉ r·ªóng ("").
2. N·∫øu mission ch·ªâ y√™u c·∫ßu **1 m·ª•c** ‚Üí tr·∫£ v·ªÅ m·ªôt JSON object ch·ª©a c√°c slot c·∫ßn thu th·∫≠p.
3. N·∫øu mission ch·ªâ c·∫ßn **c√°c field ƒë∆°n l·∫ª** (v√≠ d·ª•: th√¥ng tin c√° nh√¢n), tr·∫£ v·ªÅ m·ªôt JSON list c√°c field (string).
4. ƒê·∫ßu ra ch·ªâ l√† JSON, kh√¥ng th√™m m√¥ t·∫£ ngo√†i.

V√≠ d·ª•:
- Mission c·∫ßn 3 d·ª± √°n l·ªõn:
[
  {{ "project_name": "", "company": "", "role": "", "timeline": "", "tasks": "", "achievements": "", "technologies": "" }},
  {{ "project_name": "", "company": "", "role": "", "timeline": "", "tasks": "", "achievements": "", "technologies": "" }},
  {{ "project_name": "", "company": "", "role": "", "timeline": "", "tasks": "", "achievements": "", "technologies": "" }}
]

- Mission thu th·∫≠p ch·ª©ng ch·ªâ:
[
  {{ "certificate_name": "", "issuer": "", "date": "", "credential_id": "" }},
  {{ "certificate_name": "", "issuer": "", "date": "", "credential_id": "" }}
]

- Mission thu th·∫≠p th√¥ng tin c√° nh√¢n:
["full_name", "phone_number", "email", "address", "linkedin", "github"]
"""

     

        # G·ªçi LLM
        response = self.llm.invoke([HumanMessage(content=prompt)]).content.strip()
        print(f"\nüì§ LLM Output (raw):\n{response}")

        # Regex ƒë·ªÉ l·∫•y ph·∫ßn JSON trong code block n·∫øu c√≥
        pattern = r"```json\s*(.*?)\s*```"
        match = re.search(pattern, response, re.DOTALL)

        if match:
            json_str = match.group(1).strip()
        else:
            json_str = response.strip()

        # Parse JSON, fallback n·∫øu l·ªói
        try:
            required_slots = json.loads(json_str)
            assert isinstance(required_slots, list)
        except Exception as e:
            print(f"‚ö†Ô∏è Parse JSON th·∫•t b·∫°i ({e}), fallback v·ªÅ list m·∫∑c ƒë·ªãnh")
            required_slots = ["title_or_name", "role_or_position", "timeline", "achievements"]

        # Update mission
        mission["required_slots"] = required_slots

        update = {
            "current_mission": mission,
            "current_step": "generate_slot"
        }
        return update
    
if __name__ == "__main__":
    from langchain_google_genai import ChatGoogleGenerativeAI
    from dotenv import load_dotenv
    import os
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")

    llm = ChatGoogleGenerativeAI(
        model="gemini-2.5-flash-lite",
        temperature=0,
        api_key=api_key,
    )

    # State ban ƒë·∫ßu (v√≠ d·ª• mission c√° nh√¢n)
    state = {
        "current_mission":  {
      "name": "Thu th·∫≠p Kinh nghi·ªám l√†m vi·ªác/D·ª± √°n l·ªõn",
      "goal": "Minh ch·ª©ng kinh nghi·ªám th·ª±c t·∫ø, ƒë·∫∑c bi·ªát l√† c√°c d·ª± √°n AI/ML, ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa JD.",
      "objective": "C·∫ßn √≠t nh·∫•t 2‚Äì3 m·ª•c kinh nghi·ªám/d·ª± √°n l·ªõn. M·ªói m·ª•c c·∫ßn: t√™n c√¥ng ty/t·ªï ch·ª©c (ho·∫∑c t√™n d·ª± √°n), ch·ª©c danh/vai tr√≤, th·ªùi gian th·ª±c hi·ªán, m√¥ t·∫£ chi ti·∫øt nhi·ªám v·ª• v√† tr√°ch nhi·ªám (t·∫≠p trung v√†o AI/ML, LLMs, transformer, x·ª≠ l√Ω d·ªØ li·ªáu, ph√°t tri·ªÉn h·ªá th·ªëng), th√†nh t√≠ch ƒë·∫°t ƒë∆∞·ª£c (ƒë·ªãnh l∆∞·ª£ng h√≥a n·∫øu c√≥), v√† c√°c c√¥ng ngh·ªá/c√¥ng c·ª• ƒë√£ s·ª≠ d·ª•ng (ƒë·∫∑c bi·ªát l√† c√°c c√¥ng ngh·ªá ∆∞u ti√™n trong JD: LLMs, transformer models, semantic search, multi-agent systems, Python OOP).",
      "priority": "high"
    }
    }

    # G·ªçi node generate slot
    slot_node = GenerateSlotNode(llm=llm)
    result = slot_node(state)

    print("\n‚úÖ K·∫øt qu·∫£ sau GenerateSlotNode:")
    print(json.dumps(result, ensure_ascii=False, indent=2))